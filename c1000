task.spawn(function()
   task.wait(10)
   -- Configuration
   local SERVER_HOST = "localhost"
   local SERVER_PORT = 8766
   local HEARTBEAT_INTERVAL = 3
   local CHARACTER_LOAD_TIMEOUT = 75
   local INITIAL_LOAD_TIMEOUT = 60
   local ERROR_SHUTDOWN_DELAY = 15
   local SHUTDOWN_ON_TELEPORT_ERROR = false
   local SUCCESS_CHECK_INTERVAL = 15 -- Check for success every 10 seconds
   
   local Players = game:GetService("Players")
   local HttpService = game:GetService("HttpService")
   local RunService = game:GetService("RunService")
   local TeleportService = game:GetService("TeleportService")
   local GuiService = game:GetService("GuiService")
   
   local LocalPlayer = nil
   local ShouldBeRunning = true
   local HeartbeatLoopConnection = nil
   local SuccessCheckLoopConnection = nil
   local TeleportConnection = nil
   local ErrorMessageChangedConnection = nil
   
   local lastHeartbeatSend = 0
   local lastSuccessCheck = 0
   local lastErrorTime = 0
   local errorCooldown = 10
   local http_request_func = nil
   local hasSentSuccessSignal = false -- To prevent sending multiple success signals
   
   --[[
       ********************************************************************************
       * DEFINE YOUR SUCCESS CONDITION FUNCTION HERE                                  *
       * This function will be called every SUCCESS_CHECK_INTERVAL seconds.           *
       * It should return `true` if the success condition is met, `false` otherwise.  *
       ********************************************************************************
   --]]
   local function CheckForSuccessCondition()
       -- Example: Success if player's level is 2650 or higher
       --if LocalPlayer and LocalPlayer:FindFirstChild("Data") and LocalPlayer.Data:FindFirstChild("Level") and LocalPlayer.Data.Level.Value >= 2750 then
       --    return true
       --end
   
       --if LocalPlayer and LocalPlayer:GetAttribute("TodayLotteryLimited") then
       --    return true
       --end

      if LocalPlayer and LocalPlayer:GetAttribute("Warning") then
         return true
      end
   
       if LocalPlayer and LocalPlayer.leaderstats.Level.Value >= 1000 then
           return true
       end
       return false
   end
   --[[ ****************************************************************************** ]]
   
   
   if http_request and type(http_request) == "function" then
       http_request_func = http_request
       print("Heartbeat: Using global 'http_request'.")
   elseif syn and syn.request and type(syn.request) == "function" then
       http_request_func = syn.request
       print("Heartbeat: Using 'syn.request'.")
   elseif request and type(request) == "function" then
       http_request_func = request
       print("Heartbeat: Using global 'request'.")
   elseif game.HttpGetAsync and type(game.HttpGetAsync) == "function" then
       print("Heartbeat Warning: Using game:HttpGetAsync as fallback (Limited).")
       http_request_func = function(options)
           if options and options.Method and string.upper(options.Method) == "GET" and options.Url then
               local s, r = pcall(game.HttpGetAsync, game, options.Url, true)
               if s then
                   return { StatusCode = 200, Body = r, Success = true }
               else
                   return { StatusCode = 0, Body = "HttpGetAsync failed: "..tostring(r), Success = false }
               end
           else
               return { StatusCode = 0, Body = "HttpGetAsync fallback only supports GET", Success = false }
           end
       end
   end
   if not http_request_func then
       warn("!! HEARTBEAT CRITICAL ERROR: Could not find HTTP request function. !!")
       return
   end
   print("Heartbeat: HTTP function found.")
   
   
   local function StopHeartbeatSystem(reason)
       if not ShouldBeRunning then return end
       ShouldBeRunning = false
       print("-----------------------------------------")
       print("Heartbeat System Stopping. Reason:", reason)
       print("-----------------------------------------")
       if HeartbeatLoopConnection then
           HeartbeatLoopConnection:Disconnect()
           HeartbeatLoopConnection = nil
       end
       if SuccessCheckLoopConnection then
           SuccessCheckLoopConnection:Disconnect()
           SuccessCheckLoopConnection = nil
       end
       if TeleportConnection then
           TeleportConnection:Disconnect()
           TeleportConnection = nil
       end
       if ErrorMessageChangedConnection then
           ErrorMessageChangedConnection:Disconnect()
           ErrorMessageChangedConnection = nil
       end
   end
   
   --[[ Initial Game Load and Error Check ]]
   if not game:IsLoaded() then
       print("Heartbeat: Game not loaded. Setting up initial load check (Timeout: " .. INITIAL_LOAD_TIMEOUT .. "s)")
       task.delay(INITIAL_LOAD_TIMEOUT, function()
           if not ShouldBeRunning then return end
           if not game:IsLoaded() then
               warn("!! HEARTBEAT CRITICAL ERROR: Game did not load within " .. INITIAL_LOAD_TIMEOUT .. "s. Shutting down. !!")
               StopHeartbeatSystem("Game Initial Load Timeout")
               task.wait(0.1)
               if game and typeof(game.Shutdown) == "function" then game:Shutdown() end
               return
           end
           local errorCode = GuiService:GetErrorCode().Value
           if errorCode >= Enum.ConnectionError.DisconnectErrors.Value then
               local errorName = "Unknown"
               for key, enumItem in pairs(Enum.ConnectionError:GetEnumItems()) do if enumItem.Value == errorCode then errorName = enumItem.Name; break; end end
               warn("!! HEARTBEAT CRITICAL ERROR: Game error code " .. errorCode .. " ("..errorName..") detected during initial load phase. Shutting down. !!")
               StopHeartbeatSystem("Initial Load Game Error: " .. errorCode .. " - " .. errorName)
               task.wait(0.1)
               if game and typeof(game.Shutdown) == "function" then game:Shutdown() end
               return
           end
           print("Heartbeat: Initial load check passed (or game loaded before timeout).")
       end)
   end
   
   print("Heartbeat Script injected.")
   if not game:IsLoaded() then
       print("Heartbeat: Waiting game load...")
       game.Loaded:Wait()
       print("Heartbeat: Game loaded.")
   else
       print("Heartbeat: Game already loaded.")
   end
   
   print("Heartbeat: Waiting LocalPlayer...")
   local playerAddedConnection = nil
   LocalPlayer = Players.LocalPlayer
   if not LocalPlayer then
       playerAddedConnection = Players.PlayerAdded:Connect(function(p)
           if p == Players.LocalPlayer then
               LocalPlayer = p
           end
       end)
       while not LocalPlayer and ShouldBeRunning do
           task.wait(0.5)
           if not LocalPlayer then
               LocalPlayer = Players.LocalPlayer
           end
       end
       if playerAddedConnection then
           playerAddedConnection:Disconnect()
           playerAddedConnection = nil
       end
   else
       print("Heartbeat: LocalPlayer exists.")
   end
   
   if not LocalPlayer then
       warn("!! HEARTBEAT CRITICAL ERROR: Could not get LocalPlayer. Shutting down. !!")
       StopHeartbeatSystem("LocalPlayer Acquisition Failed")
       task.wait(0.1)
       if game and typeof(game.Shutdown) == "function" then game:Shutdown() end
       return
   end
   print("Heartbeat: LocalPlayer ready:", LocalPlayer.Name, "(ID:", LocalPlayer.UserId, ")")
   
   print("Heartbeat: Waiting for Character to load (Timeout: " .. CHARACTER_LOAD_TIMEOUT .. "s)...")
   local startTime = tick()
   local character = LocalPlayer.Character
   while not character and (tick() - startTime) < CHARACTER_LOAD_TIMEOUT and ShouldBeRunning do
       character = LocalPlayer.Character
       if not character then
           LocalPlayer.CharacterAdded:Wait(0.1)
           character = LocalPlayer.Character
       end
   end
   
   if not character and ShouldBeRunning then
       warn("!! HEARTBEAT CRITICAL ERROR: Character did not load within timeout (" .. CHARACTER_LOAD_TIMEOUT .. "s). Shutting down. !!")
       StopHeartbeatSystem("Character Load Timeout")
       task.wait(0.5)
       if game and typeof(game.Shutdown) == "function" then game:Shutdown() end
       return
   elseif character then
       print("Heartbeat: Character loaded successfully.")
   end
   
   if not ShouldBeRunning then
       print("Heartbeat: System was stopped during initialization.")
       return
   end
   
   local function SendHeartbeat()
       if not LocalPlayer or not ShouldBeRunning then return end
       local ct = tick()
       if ct - lastHeartbeatSend < HEARTBEAT_INTERVAL then return end
       lastHeartbeatSend = ct
       local uid = LocalPlayer.UserId
       local un = LocalPlayer.Name
       local en = HttpService:UrlEncode(un)
       local url = string.format("http://%s:%d/heartbeat?userId=%d&name=%s", SERVER_HOST, SERVER_PORT, uid, en)
       local ro = { Url = url, Method = "GET" }
       task.spawn(function()
           local s, r = pcall(http_request_func, ro)
           local t = tick()
           if s then
               if r and type(r) == 'table' then
                   local sc = r.StatusCode or r.statusCode or 0
                   if sc ~= 200 and t - lastErrorTime > errorCooldown then
                       print("HB Err: Fail Status "..sc)
                       lastErrorTime = t
                   end
               elseif not r and t - lastErrorTime > errorCooldown then
                   print("HB Err: No Response")
                   lastErrorTime = t
               end
           elseif t - lastErrorTime > errorCooldown then
               print("HB Err: HTTP Exc: "..tostring(r))
               lastErrorTime = t
           end
       end)
   end
   
   -- Function to send success signal
   local function SendSuccessSignal()
       if not LocalPlayer or not ShouldBeRunning or hasSentSuccessSignal then return end
   
       hasSentSuccessSignal = true -- Set flag to true immediately to prevent multiple sends
       print("SUCCESS: Sending success signal to server...")
   
       local uid = LocalPlayer.UserId
       local un = LocalPlayer.Name
       local en = HttpService:UrlEncode(un)
       -- Ensure this matches the Python server's endpoint for success reporting
       local url = string.format("http://%s:%d/success?userId=%d&name=%s", SERVER_HOST, SERVER_PORT, uid, en)
       local ro = { Url = url, Method = "GET" }
   
       task.spawn(function()
           local s, r = pcall(http_request_func, ro)
           if s then
               if r and type(r) == 'table' then
                   local sc = r.StatusCode or r.statusCode or 0
                   if sc == 200 then
                       print("SUCCESS: Signal acknowledged by server (Status " .. sc .. ").")
                       -- The Python server will handle closing the instance.
                       -- Stop local loops as their main purpose is fulfilled.
                       if SuccessCheckLoopConnection then
                           SuccessCheckLoopConnection:Disconnect()
                           SuccessCheckLoopConnection = nil
                           print("Local success check loop stopped.")
                       end
                       if HeartbeatLoopConnection then
                           HeartbeatLoopConnection:Disconnect()
                           HeartbeatLoopConnection = nil
                           print("Local heartbeat loop stopped as success was signaled.")
                       end
                   else
                       print("SUCCESS ERR: Server responded with status " .. sc .. " to success signal. Body: " .. tostring(r.Body))
                       hasSentSuccessSignal = false -- Allow retry if server didn't acknowledge properly
                   end
               else
                   print("SUCCESS ERR: No valid response from server for success signal.")
                   hasSentSuccessSignal = false -- Allow retry
               end
           else
               print("SUCCESS ERR: HTTP Exception sending success signal: " .. tostring(r))
               hasSentSuccessSignal = false -- Allow retry
           end
       end)
   end
   
   -- Function for the success check loop
   local function OnSuccessCheckLoop()
       if not ShouldBeRunning or not SuccessCheckLoopConnection or hasSentSuccessSignal then
           if not ShouldBeRunning and SuccessCheckLoopConnection then
               SuccessCheckLoopConnection:Disconnect()
               SuccessCheckLoopConnection = nil
           end
           return
       end
   
       local ct = tick()
       if ct - lastSuccessCheck < SUCCESS_CHECK_INTERVAL then return end
       lastSuccessCheck = ct
   
       local conditionMet = false
       local pcallSuccess, resultOrError = pcall(CheckForSuccessCondition)
   
       if not pcallSuccess then
           warn("Error in CheckForSuccessCondition function: " .. tostring(resultOrError))
           return -- Don't proceed if the condition check itself errored
       end
   
       -- pcall was successful, resultOrError is the actual return value of CheckForSuccessCondition
       conditionMet = resultOrError
   
       if conditionMet then
           SendSuccessSignal()
           -- After sending the signal, the SendSuccessSignal function will disconnect loops if successful.
       end
   end
   
   
   print("Heartbeat: Connecting event handlers...")
   TeleportConnection = LocalPlayer.OnTeleport:Connect(function(teleportState, placeId, instanceId)
       if not ShouldBeRunning then return end
       print("Heartbeat: Teleport State Changed:", teleportState.Name)
       if teleportState == Enum.TeleportState.Started then
           StopHeartbeatSystem("Teleport Started")
       elseif teleportState == Enum.TeleportState.Failed then
           warn("!! Teleport Failed !!")
           StopHeartbeatSystem("Teleport Failed Event")
       end
   end)
   print(" - OnTeleport connected.")
   
   ErrorMessageChangedConnection = GuiService.ErrorMessageChanged:Connect(function()
       if not ShouldBeRunning then return end
       local errorCode = GuiService:GetErrorCode().Value
       local errorName = "Unknown"
       for key, enumItem in pairs(Enum.ConnectionError:GetEnumItems()) do
           if enumItem.Value == errorCode then errorName = enumItem.Name; break; end
       end
       print("Heartbeat: GuiService.ErrorMessageChanged - Code:", errorCode, "Name:", errorName)
       if errorCode >= Enum.ConnectionError.DisconnectErrors.Value then
           local isTeleportSpecificError = (errorCode >= Enum.ConnectionError.TeleportFailure.Value and errorCode <= Enum.ConnectionError.TeleportFatalError.Value)
           if not SHUTDOWN_ON_TELEPORT_ERROR and isTeleportSpecificError then
               print("Heartbeat: Teleport error detected (Code: " .. errorCode .. " - " .. errorName .. "), but SHUTDOWN_ON_TELEPORT_ERROR is false. Heartbeat system will stop, but game will not be shut down by this handler.")
               StopHeartbeatSystem("Teleport Error (No Shutdown): " .. errorCode .. " - " .. errorName)
               return
           end
           warn("!! HEARTBEAT CRITICAL ERROR: Game disconnect error detected (Code: " .. errorCode .. " - " .. errorName .. "). Scheduling shutdown in " .. ERROR_SHUTDOWN_DELAY .. "s. !!")
           StopHeartbeatSystem("Game Disconnect Error: " .. errorCode .. " - " .. errorName)
           task.delay(ERROR_SHUTDOWN_DELAY, function()
               if game and typeof(game.Shutdown) == "function" then
                   print("Heartbeat: Executing game:Shutdown() due to error code " .. errorCode)
                   game:Shutdown()
               else
                   print("Heartbeat: game:Shutdown() not available or game object gone when trying to shutdown for error " .. errorCode)
               end
           end)
       end
   end)
   print(" - ErrorMessageChanged connected.")
   
   SendHeartbeat() -- Initial heartbeat send
   
   local function OnHeartbeatLoop()
       if not ShouldBeRunning or not HeartbeatLoopConnection then
           if HeartbeatLoopConnection then
               HeartbeatLoopConnection:Disconnect()
               HeartbeatLoopConnection = nil
           end
           return
       end
       SendHeartbeat()
   end
   
   if RunService:IsClient() then
       HeartbeatLoopConnection = RunService.Heartbeat:Connect(OnHeartbeatLoop)
       SuccessCheckLoopConnection = RunService.Heartbeat:Connect(OnSuccessCheckLoop)
       print("Heartbeat: Connected Heartbeat loop to RunService.Heartbeat.")
       print("Heartbeat: Connected Success Check loop to RunService.Heartbeat.")
   else
       HeartbeatLoopConnection = RunService.RenderStepped:Connect(OnHeartbeatLoop)
       SuccessCheckLoopConnection = RunService.RenderStepped:Connect(OnSuccessCheckLoop)
       print("Heartbeat: Connected Heartbeat loop to RunService.RenderStepped.")
       print("Heartbeat: Connected Success Check loop to RunService.RenderStepped.")
   end
   
   print("--- Heartbeat Script Initialized and Running ---")
end)
task.spawn(function()
   task.wait(20)
   _G.Config = {
   UserID = "058fa22d-2283-4235-9a9b-d9143c0e5631",
   discord_id = "1400014433018974319" ,
   Note = PC_NAME,
   }
   loadstring(game:HttpGet("https://raw.githubusercontent.com/skadidau/unfazedfree/refs/heads/main/fisch"))()
end)
task.spawn(function()

--

getgenv().__CONFIG__ = {
    roadmap = {
        [1] = "Carbon Rod",
        [2] = "Rapid Rod",
        [3] = "Carrot Rod",
        [4] = "Luminescent Oath",
        [5] = "Great Rod of Oscar",
    },
    enchant = {
        ["Carrot Rod"] = {"Clever"},
        ["Luminescent Oath"] = {"Clever"},
        ["Great Rod of Oscar"] = {"Clever"},
    }
}

dodebug = tru

repeat task.wait() until game:IsLoaded()
task.wait(7.5)

if not dodebug then
do
    local function OptimizeGamePerformance_Enhanced()

        local Workspace = game:GetService("Workspace")
        local Lighting = game:GetService("Lighting")
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")

        local thisScript = script
        local player = Players.LocalPlayer

        task.spawn(function()
            while task.wait(3) do
                RunService:Set3dRenderingEnabled(true)
                task.wait(0.1)
                RunService:Set3dRenderingEnabled(false)
            end
        end)

        pcall(function()
            settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
            settings().Rendering.MaterialQuality = Enum.MaterialQuality.Level01
        end)

        Lighting.Technology = Enum.Technology.Compatibility
        Lighting.GlobalShadows = false
        Lighting.Brightness = 0.5
        Lighting.OutdoorAmbient = Color3.new(0.1, 0.1, 0.1)
        Lighting.EnvironmentSpecularScale = 0
        Lighting.EnvironmentDiffuseScale = 0

        pcall(function()
            local terrain = Workspace:FindFirstChildOfClass("Terrain")
            if terrain then
                terrain.WaterWaveSize = 0
                terrain.WaterWaveSpeed = 0
                terrain.WaterReflectance = 0
                terrain.WaterTransparency = 0.8
                terrain.Decoration = false
            end
        end)
    end

    OptimizeGamePerformance_Enhanced()
end
end

local function reverseTableInPlace(tbl)
    local n = #tbl
    for i = 1, math.floor(n / 2) do
        local j = n - i + 1
        tbl[i], tbl[j] = tbl[j], tbl[i]
    end
end

reverseTableInPlace(__CONFIG__.roadmap)

local enchantList = {}
for i, v in pairs(__CONFIG__.enchant) do
    table.insert(enchantList, i)
end

local ContextActionService = game:GetService("ContextActionService")
local HttpService = game:GetService("HttpService")
local MessagingService = game:GetService("MessagingService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local VirtualUser = game:GetService("VirtualUser")
local tweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Workspace = game:GetService("Workspace")
local tpservice = game:GetService("TeleportService")
local Lighting = game:GetService("Lighting")
local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local camera = Workspace.Camera
local Character = LocalPlayer.Character
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")
local Torso = Character:WaitForChild("Torso")

local PlayerStats = workspace.PlayerStats[LocalPlayer.Name].T[LocalPlayer.Name]
local StatsRod = PlayerStats.Rods

LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, nil)
VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, nil)

task.wait(5)

local Settings = {
    music = false,
    ambience = false,
    weather = false,
    radio = false,
    mute_other_players_fishing = false,
    hear_emotes = false,

    brightness = false,
    saturation = false,
    showflags = false,

    performanceMode = true,
    showcrabcages = false,
    show_other_players_fish_on_hands = false,
    windshake = false,

    nametag = false,
    systemmessages = false,

    disableCamShake = true,
    willautosell_event = true,
    willautosell_exotic = true,
    willautosell_relic = false,
    willautosell_mythical = true,
    willautosell_legendary = true,
    willautosell_secret = true,
    willautosell_apex = true
}

for settingName, settingValue in pairs(Settings) do
    local args = {
        [1] = settingName,
        [2] = settingValue
    }
    ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RE/Settings/Update"):FireServer(unpack(args))
end

ReplicatedStorage.GameAnalyticsError:Destroy()
ReplicatedStorage.events.afk:FireServer()
ReplicatedStorage.events.afk:Destroy()

--[[
local codelists = {
    "FISCHANNIVERSARY",
    "LOSTJUNGLE",
    "LOSTJUNGLESOON",
    "CAVERN",
    "SNOWBURROW",
    "TemporarySubmarine",
    "SUPPORTERDESTINY",
    "METEOR",
    "FISCHFEST",
    "OGNOLIFE",
    "SECONDARYENCHANT",
    "PERSONALAQUARIUMS",
    "SORRY",
    "ROSES",
    "DAILYSHOP",
    "DARKHEART",
    "FRIENDXP",
    "4THOFJULY",
    "ChangesComing",
    "Legomy",
    "SorryReward",
    "THEKRAKEN",
    "CARBON",
    "SORRYGUYS",
    "ATLANTEANSTORM",
    "GOLDENTIDE",
    "NewYear",
    "NorthernExpedition",
}
for _, v in ipairs(codelists) do
    ReplicatedStorage.events.runcode:FireServer(v)
end]]

local function extractNumber(String)
    return tonumber((String:gsub("[^%d]", "")))
end

do

    workspace.CrystalCove:Destroy()
    workspace.world.map["Roslit Bay"]:Destroy()
    ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/RequestCache"):Destroy()

    --red
    local FpsPart = Instance.new("Part")
    FpsPart.Name = "FPSBOOST"
    FpsPart.Position = Vector3.new(1375.10254, -617, 2338.02441)
    FpsPart.Size = Vector3.new(30, 1, 30)
    FpsPart.Color = Color3.fromRGB(0,0,0)
    FpsPart.Anchored = true
    FpsPart.Parent = Workspace
    FpsPart.Transparency = 0

    --blue
    local FpsPart = Instance.new("Part")
    FpsPart.Name = "FPSBOOST"
    FpsPart.Position = Vector3.new(-13627.2509765625, -11061.5, 327.5318908691406)
    FpsPart.Size = Vector3.new(30, 1, 30)
    FpsPart.Color = Color3.fromRGB(0,0,0)
    FpsPart.Anchored = true
    FpsPart.Parent = Workspace
    FpsPart.Transparency = 0

    --Merlin
    local FpsPart = Instance.new("Part")
    FpsPart.Name = "FPSBOOST"
    FpsPart.Position = Vector3.new(-926.718994, 218, -998.751404)
    FpsPart.Size = Vector3.new(30, 1, 30)
    FpsPart.Color = Color3.fromRGB(0,0,0)
    FpsPart.Anchored = true
    FpsPart.Parent = Workspace
    FpsPart.Transparency = 0

    local function applyAntiWaterPhysics(character)
        local humanoid = character:WaitForChild("Humanoid")
        if not humanoid then return end

        humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
        local heavyProperties = PhysicalProperties.new(5, 0.7, 0.5)

        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CustomPhysicalProperties = heavyProperties
            end
        end
    end

    LocalPlayer.CharacterAdded:Connect(applyAntiWaterPhysics)
    applyAntiWaterPhysics(Character)

    HumanoidRootPart.CFrame = CFrame.new(-926.718994, 223.700012, -998.751404)

    task.wait(1)

    for _, v in ipairs(workspace.world.npcs:WaitForChild("Merlin"):WaitForChild("Merlin"):GetChildren()) do
        if v.Name == 'luck' and v ~= workspace.world.npcs.Merlin.Merlin:FindFirstChild("luck") then
            v.Parent = ReplicatedStorage
        end
        if v.Name == 'power' and v ~= workspace.world.npcs.Merlin.Merlin:FindFirstChild("power") then
            v.Parent = ReplicatedStorage
        end
    end

    task.wait()

    if not dodebug then
    task.spawn(function()
        local startTime = tick()

        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "__w"
        screenGui.Parent = PlayerGui
        screenGui.ResetOnSpawn = false
        screenGui.IgnoreGuiInset = true

        local backgroundFrame = Instance.new("Frame")
        backgroundFrame.Parent = screenGui
        backgroundFrame.Size = UDim2.new(1, 0, 1, 0)
        backgroundFrame.Position = UDim2.new(0, 0, 0, 0)
        backgroundFrame.BackgroundColor3 = Color3.new(0, 0, 0)
        backgroundFrame.BorderSizePixel = 0

        local textLabel = Instance.new("TextLabel")
        textLabel.Parent = backgroundFrame
        textLabel.Size = UDim2.new(0, 1000, 0, 250)
        textLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
        textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
        textLabel.Text = "00:00:00\n"..LocalPlayer.Name
        textLabel.TextColor3 = Color3.new(1, 1, 1)
        textLabel.BackgroundTransparency = 1
        textLabel.TextScaled = true
        textLabel.Font = Enum.Font.SourceSansBold
        textLabel.BorderSizePixel = 0

        local function updateTime()
            local currentTime = tick() - startTime
            local hours = math.floor(currentTime / 3600)
            local minutes = math.floor((currentTime % 3600) / 60)
            local seconds = math.floor(currentTime % 60)

            textLabel.Text = string.format("%02d:%02d:%02d\n"..LocalPlayer.Name, hours, minutes, seconds)
        end

        while task.wait(0.25) do
            updateTime()
        end
    end)
    end

    local destroyPlayer = function(v)
        if v:IsA("Model") and v:FindFirstChild("Health") then
            if v.Name ~= LocalPlayer.Name then
                v:Destroy()
            end
        end
    end
    for _, v in pairs(Workspace:GetChildren()) do
        destroyPlayer(v)
    end
    Workspace.ChildAdded:Connect(function(v)
        task.wait(2)
        destroyPlayer(v)
    end)

    workspace.active.ChildAdded:Connect(function(v)
        task.wait()
        v:Destroy()
    end)
    task.spawn(function()
        while task.wait(15) do
            for _, v in ipairs(Players:GetChildren()) do
                if v == LocalPlayer then
                    for _, vv in ipairs(v:GetChildren()) do
                        if vv.Name == "Passdown" then vv:Destroy() end
                    end
                else
                    for _, vv in ipairs(v:GetChildren()) do
                        if vv.Name == "leaderstats" then continue end
                        vv:Destroy()
                    end
                end
            end
        end
    end)
end



local ItemPrice = {
    ["Sundial Totem"] = 2000,
    ["Aurora Totem"] = 5000000,
    ["Carbon Rod"] = 2000,
    ["Rapid Rod"] = 14000,
    ["Carrot Rod"] = 75000,
    ["Luminescent Oath"] = 1500000,
    ["Great Rod of Oscar"] = 5000000,
}

local purchaseRod = function(rodname)
    -- if StatsRod:FindFirstChild(rodname) then
    --     return false
    -- end
    if PlayerStats.Stats.coins.Value < ItemPrice[rodname] then
        return false
    end
    ReplicatedStorage.events.purchase:FireServer(rodname, "Rod", nil, 1)
    return true
end

local enchantRod = function(rod)
    if not table.find(enchantList, rod) then return end
    if table.find(__CONFIG__.enchant[rod], StatsRod[rod].Value) then return end
    if ReplicatedStorage.events.enchantrod:InvokeServer() == "You are on cooldown!" then return end
    local er = Backpack:FindFirstChild("Enchant Relic")
    if not er and PlayerStats.Stats.coins.Value > 11000 then
        task.spawn(function()
            ReplicatedStorage.power:InvokeServer()
        end)
        task.wait(0.25)
        er = Backpack:WaitForChild("Enchant Relic")
    elseif not er then
        return
    end
    Humanoid:EquipTool(er)
    task.wait(0.1)
    ReplicatedStorage.events.enchantrod:InvokeServer()
    task.wait(1)
end

local checkRod = function() end
checkRod = function()
    for _, v in ipairs(__CONFIG__.roadmap) do
        if StatsRod:FindFirstChild(v) then
            if PlayerStats.Stats.rod.Value == v then
                enchantRod(v)
                return false
            else
                ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/Rod/Equip"):InvokeServer(v)
                task.wait()
                return true
            end
        else
            if purchaseRod(v) then
                task.wait(0.25)
                return checkRod()
            end
        end
    end
end

local checkAurora = function()
    if PlayerStats.Stats.rod.Value ~= __CONFIG__.roadmap[1] or PlayerStats.Stats.coins.Value < (ItemPrice["Aurora Totem"] + ItemPrice["Sundial Totem"]) then return end
    local bestplayer = {LocalPlayer, extractNumber(LocalPlayer.leaderstats["C$"].Value)}
    for _, v in ipairs(Players:GetChildren()) do
        if not v:IsA("Player") then continue end
        local p_m = extractNumber(v.leaderstats["C$"].Value)
        if p_m > bestplayer[2] then
            bestplayer = {v, p_m}
        end
    end
    if bestplayer[1] ~= LocalPlayer then return end
    local function checkDayNight()
        return ReplicatedStorage.world.cycle.Value
    end

    local function checkAurora()
        if ReplicatedStorage.world.weather.Value == "Aurora_Borealis" then
            return true
        end
    end
    if checkDayNight() ~= "Night" then
        if Backpack:FindFirstChild("Sundial Totem") then
            Humanoid:EquipTool(Backpack:FindFirstChild("Sundial Totem"))
        else
            ReplicatedStorage:WaitForChild("events"):WaitForChild("purchase"):FireServer("Sundial Totem", "Item", nil, 1)
            task.wait(0.5)
            Humanoid:EquipTool(Backpack:FindFirstChild("Sundial Totem"))
        end
        task.wait(math.random(1, 20) / 10)
        if Character:FindFirstChild("Sundial Totem") and checkDayNight() ~= "Night" then
            local viewportSize = workspace.CurrentCamera.ViewportSize
            local x, y = 0, viewportSize.Y - 1
            VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, nil, 0)
            VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, nil, 0)
            task.wait(1)
        end
    end
    task.wait(7)
    if checkDayNight() == "Night" and not checkAurora() then
        if Backpack:FindFirstChild("Aurora Totem") then
            Humanoid:EquipTool(Backpack:FindFirstChild("Aurora Totem"))
        else
            ReplicatedStorage:WaitForChild("events"):WaitForChild("purchase"):FireServer("Aurora Totem", "Item", nil, 1)
            task.wait(0.5)
            Humanoid:EquipTool(Backpack:FindFirstChild("Aurora Totem"))
            task.wait(0.25)
        end
        task.wait(math.random(1, 20) / 10)
        if Character:FindFirstChild("Aurora Totem") and not checkAurora() then
            local viewportSize = workspace.CurrentCamera.ViewportSize
            local x, y = 0, viewportSize.Y - 1
            VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, nil, 0)
            VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, nil, 0)
            task.wait(1)
        end
    end
end

local checkBait = function() end
checkBait = function()
    if not StatsRod:FindFirstChild(__CONFIG__.roadmap[3]) then return end 
    local bait = PlayerStats.Stats.bait
    if bait.Value == "Luminous Larva" then return end
    if bait:FindFirstChild("bait_Luminous Larva") and bait["bait_Luminous Larva"].Value > 0 then
        Humanoid:EquipTool(Backpack:FindFirstChild("Equipment Bag"))
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RE/Bait/Equip"):FireServer("Luminous Larva")
        return
    end
    if bait.Value == "Sapphire Krill" then return end
    if bait:FindFirstChild("bait_Sapphire Krill") and bait["bait_Sapphire Krill"].Value > 0 then
        Humanoid:EquipTool(Backpack:FindFirstChild("Equipment Bag"))
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RE/Bait/Equip"):FireServer("Sapphire Krill")
        return
    end
    if PlayerStats.Stats.coins.Value > 1000000 then
        ReplicatedStorage:WaitForChild("events"):WaitForChild("purchase"):FireServer("Tropical Bait Crate", "Fish", nil, 1000)
    elseif PlayerStats.Stats.coins.Value > 500000 then
        ReplicatedStorage:WaitForChild("events"):WaitForChild("purchase"):FireServer("Tropical Bait Crate", "Fish", nil, 500)
    elseif PlayerStats.Stats.coins.Value > 15000 then
        ReplicatedStorage:WaitForChild("events"):WaitForChild("purchase"):FireServer("Tropical Bait Crate", "Fish", nil, 100)
    else
        return
    end
    Backpack:WaitForChild("Tropical Bait Crate")
    while Character:FindFirstChild("Tropical Bait Crate") or Backpack:FindFirstChild("Tropical Bait Crate") do
        if not Character:FindFirstChild("Tropical Bait Crate") then
            Humanoid:EquipTool(Backpack:FindFirstChild("Tropical Bait Crate"))
        end
        local viewportSize = workspace.CurrentCamera.ViewportSize
        local x, y = 0, viewportSize.Y - 1
        VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, nil, 0)
        VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, nil, 0)
        task.wait()
    end
    checkBait()
end

--

PlayerGui.ChildAdded:Connect(function(Child)
    if Child.Name == "shakeui" then
        Child:WaitForChild("safezone").ChildAdded:Connect(function(button)
            if button.Name == "button" then
                GuiService.SelectedObject = button
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, nil)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, nil)
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, nil)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, nil)
            end
        end)
    --elseif Child.Name == "reel" then
        --local rodNameCache = PlayerStats.Stats.rod.Value
        --local rod = Backpack:FindFirstChild(rodNameCache) or Character:FindFirstChild(rodNameCache)
        --if not rod then return end
        --while rod:FindFirstChild("bobber") and not rod.values.bite.Value do
        --    RunService.Heartbeat:Wait()
        --end
        -- ReplicatedStorage.events.reelfinished:FireServer(100, false)
        --Humanoid:UnequipTools()
    end
end)

task.spawn(function() while task.wait(15) do
    task.spawn(function()
        if not PlayerStats.Stats:FindFirstChild("status_luck") and PlayerStats.Stats.coins.Value > 14000 then
            ReplicatedStorage.luck:InvokeServer()
        end
    end)
end end)

--[[
task.spawn(function()
    while task.wait() do
        local nr
        local rodNameCache = PlayerStats.Stats.rod.Value
        local rod = Character:FindFirstChild(rodNameCache) or Backpack:FindFirstChild(rodNameCache)
        if not rod then continue end
        local j = table.find(__CONFIG__.roadmap, rodNameCache)
        if j and table.find(__CONFIG__.roadmap, rodNameCache) <= 4 then
            local bobber = rod:FindFirstChild("bobber")
            if not bobber then continue end
            for _, v in ipairs(bobber:GetChildren()) do
                if v:IsA("Model") and (string.find(v.Name, "Minnow") or string.find(v.Name, "Deep") or string.find(v.Name, "Octopus") or string.find(v.Name, "Three")) then
                    ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/Rod/Equip"):InvokeServer("Flimsy Rod")
                    checkRod()
                    nr = true
                    break
                end
            end
        end
        if not nr and rod.values.bite.Value then
            ReplicatedStorage.events.reelfinished:FireServer(100, false)
            --repeat RunService.Heartbeat:Wait() until not rod.values.bite.Value
            --Humanoid:UnequipTools()
        end
    end
end)

local Fishing = function()
    checkRod()

    local rodNameCache = PlayerStats.Stats.rod.Value
    local rod = Character:FindFirstChild(rodNameCache) or Backpack:FindFirstChild(rodNameCache)

    if not rod then return end

    if rod.Parent == Backpack then
        Humanoid:EquipTool(rod)
        Character:WaitForChild(rodNameCache)
        task.wait(0.15)
    end

    rod.events.castAsync:InvokeServer(100, 1)

    task.wait(0.25)

    if not rod.values.casted.Value then
        Humanoid:UnequipTools()
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/Rod/Equip"):InvokeServer("Flimsy Rod")
        return
    end
end]]

task.spawn(function()

    --HumanoidRootPart.CFrame = CFrame.new(-13627.251, -11058.0029, 327.531921, 0.626280308, 4.53706571e-06, 0.779597938, -1.59229478e-06, 1, -4.54060046e-06, -0.779597938, 1.60233901e-06, 0.626280308)
    HumanoidRootPart.CFrame = CFrame.new(1375.90063, -613.523499, 2336.47266, 0.927495897, -0.00341386558, -0.373817742, -1.92194693e-06, 0.999958277, -0.00913682114, 0.373833328, 0.008475082, 0.927457213)
    task.wait(2)
    HumanoidRootPart.CFrame = CFrame.new(1375.90063, -613.523499, 2336.47266, 0.927495897, -0.00341386558, -0.373817742, -1.92194693e-06, 0.999958277, -0.00913682114, 0.373833328, 0.008475082, 0.927457213)
    task.wait(0.25)
    local positionLocker = Instance.new("BodyVelocity")
    positionLocker.Name = "PositionLocker"
    positionLocker.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    positionLocker.Velocity = Vector3.new(0, 0, 0)
    positionLocker.Parent = HumanoidRootPart
    task.wait(5)

    local dfix = false
    local dosell = 0

    local rodNameCache = PlayerStats.Stats.rod.Value
    local rod = Character:FindFirstChild(rodNameCache) or Backpack:FindFirstChild(rodNameCache)

    while task.wait() do

            rodNameCache = PlayerStats.Stats.rod.Value
            rod = Character:FindFirstChild(rodNameCache) or Backpack:FindFirstChild(rodNameCache)

            if not rod and rod:FindFirstChild("values") then continue end
            if not rod.values.casted.Value then

                if dosell >= 10 then
                    dosell = 0
                    task.spawn(function()
                        ReplicatedStorage.events.SellAll:InvokeServer()
                    end)
                end

                if checkRod() then continue end
                pcall(checkAurora)
                pcall(checkBait)

                --task.wait()
                --Humanoid:UnequipTools()
                --task.wait()
                --Humanoid:EquipTool(rod)
                --task.wait()
                if rod.Parent == Backpack then
                    Humanoid:EquipTool(rod)
                    Character:WaitForChild(rodNameCache)
                    continue
                end
                rod.events.castAsync:InvokeServer(100, 1)

                task.spawn(function()
                    if dfix then return end
                    dfix = true
                    local DURATION = 2
                    local startTime = tick()
                    local endTime = startTime + DURATION

                    pcall(function()
                        while tick() < endTime do
                            if rod.values.casted.Value then
                                dosell+=1
                                return
                            end
                            task.wait()
                        end

                        if not rod.values.casted.Value then
                            Humanoid:UnequipTools()
                        end
                    end)
                    dfix = false
                end)
                

                --repeat RunService.Heartbeat:Wait() until rod.values.bobberzone.Value ~= "nil"
                --repeat RunService.Heartbeat:Wait() until rod.values.bobberzone.Value == "nil" and not rod.values.casted.Value
                --rod.values.bite:GetPropertyChangedSignal("Value"):Once(function()
                --    ReplicatedStorage.events.reelfinished:FireServer(100, false)
                --end)
            else
                --local nr
                --local j = table.find(__CONFIG__.roadmap, rodNameCache)
                --if j and table.find(__CONFIG__.roadmap, rodNameCache) <= 4 then
                --    local bobber = rod:FindFirstChild("bobber")
                --    if not bobber then continue end
                --    for _, v in ipairs(bobber:GetChildren()) do
                --        if v:IsA("Model") and (string.find(v.Name, "Minnow") or string.find(v.Name, "Deep") or string.find(v.Name, "Octopus") or string.find(v.Name, "Three")) then
                --            ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/Rod/Equip"):InvokeServer("Flimsy Rod")
                --            checkRod()
                --            nr = true
                --            break
                --        end
                --    end
                --end
                if --[[not nr and]] rod.values.bite.Value then
                    repeat ReplicatedStorage.events.reelfinished:FireServer(100, false) RunService.Heartbeat:Wait() until not rod.values.casted.Value
                    --Humanoid:UnequipTools()
                    --dosell+=1
                end
--                if table.find(__CONFIG__.roadmap, rodNameCache) <= 4 then
--                    local bobber = rod:FindFirstChild("bobber")
--                    if not bobber then return end
--                    for _, v in ipairs(bobber:GetChildren()) do
--                        if v:IsA("Model") and (string.find(v.Name, "Minnow") or string.find(v.Name, "Deep") or string.find(v.Name, "Octopus") or string.find(v.Name, "Three")) then
--                            ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/Rod/Equip"):InvokeServer("Flimsy Rod")
--                            checkRod()
--                            return
--                        end
--                    end
--                end
--                if rod.values.bite.Value then
--                    ReplicatedStorage.events.reelfinished:FireServer(100, false)
--                    --repeat RunService.Heartbeat:Wait() until not rod.values.bite.Value
--                    --Humanoid:UnequipTools()
--                end
            end


    end

end)

--

end)

task.spawn(function()
   pcall(function()
       local Players = game:GetService("Players")
       local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()
   
       task.wait(20)
       local PlayerStats = workspace.PlayerStats[LocalPlayer.Name].T[LocalPlayer.Name]
   
       task.spawn(function()
           while task.wait(10) do
               if PlayerStats.Stats.level.Value ~= PlayerStats.Stats.realLevel.Value then
                   PlayerStats.Stats.level.Value = PlayerStats.Stats.realLevel.Value
               end
               if LocalPlayer.leaderstats.Level.Value ~= PlayerStats.Stats.realLevel.Value then
                   LocalPlayer.leaderstats.Level.Value = PlayerStats.Stats.realLevel.Value
               end
               for i, v in ipairs(LocalPlayer.PlayerGui:GetChildren()) do
                   if v:IsA('Sound') then
                       v:Destroy()
                   end
               end
           end
       end)

--[[
       task.wait(50)
       if PlayerStats.Stats.realLevel.Value <= 1 then
           game:Shutdown()
       else
           _G.savelv = PlayerStats.Stats.realLevel.Value
           while task.wait(600) do
               if PlayerStats.Stats.realLevel.Value == 1000 then
                  continue
               end
               if _G.savelv == PlayerStats.Stats.realLevel.Value then
                   game:Shutdown()
               end
               _G.savelv = PlayerStats.Stats.realLevel.Value
           end
       end]]
   end)
   --game:Shutdown()

end)
